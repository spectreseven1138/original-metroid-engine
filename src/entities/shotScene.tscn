[gd_scene load_steps=19 format=2]

[ext_resource path="res://assets/samus/standard shot impact.png" type="Texture" id=2]
[ext_resource path="res://assets/samus/standard shot.png" type="Texture" id=3]
[ext_resource path="res://assets/other/super missile.png" type="Texture" id=4]
[ext_resource path="res://assets/other/missile.png" type="Texture" id=5]
[ext_resource path="res://assets/enemies/death explosion/1.png" type="Texture" id=6]
[ext_resource path="res://assets/enemies/death explosion/2.png" type="Texture" id=7]
[ext_resource path="res://assets/enemies/death explosion/4.png" type="Texture" id=8]
[ext_resource path="res://assets/enemies/death explosion/5.png" type="Texture" id=9]
[ext_resource path="res://assets/enemies/death explosion/6.png" type="Texture" id=10]
[ext_resource path="res://assets/enemies/death explosion/3.png" type="Texture" id=11]

[sub_resource type="GDScript" id=8]
script/source = "extends Area2D

var bulletSpeed = 6
var direction: String
var action: Vector2
var beamType: String
var boost: Vector2
var trailTime = 0.05
const trail = preload(\"res://src/MissileTrail.tscn\")
var sound = \"\"

func setType(type):
	beamType = type
	
	match beamType:
		\"standard\": 
			sound = preload(\"res://assets/sounds/samus/BaseShot.ogg\")
			$Hitbox.position.x = 0
			$Hitbox.shape.height = 4
			$Hitbox.shape.radius = 9
		\"missile\": sound = preload(\"res://assets/sounds/samus/Missile.ogg\")
		\"super missile\": sound = preload(\"res://assets/sounds/samus/SMissile.ogg\")
		
	
func momentumBoost(vel:Vector2):
	boost = vel / 75

func setDirection(dir):
	direction = dir
			
	# set the action to be executed each frame based on the 'direction' variable
	# rotate bullet if needed
	match direction:
		\"right\": 
			action = Vector2(bulletSpeed, 0)
			self.rotation_degrees = 180
		\"left\": 
			action = Vector2(-bulletSpeed, 0)
		\"up\": 
			action = Vector2(0, -bulletSpeed)
			self.rotation_degrees = 90
		\"down\": 
			action = Vector2(0, bulletSpeed)
			self.rotation_degrees = 270
		
		\"upright\": 
			action = Vector2(bulletSpeed, -bulletSpeed)
			self.rotation_degrees = 135
				
		\"upleft\": 
			action = Vector2(-bulletSpeed, -bulletSpeed)
			self.rotation_degrees = 45
			
		\"downleft\": 
			action = Vector2(-bulletSpeed, bulletSpeed)
			self.rotation_degrees = 315
			
		\"downright\": 
			action = Vector2(bulletSpeed, bulletSpeed)
			self.rotation_degrees = 225
			
	if (boost.x > 0 and action.x > 0) or (boost.x < 0 and action.x < 0):
		action.x += boost.x
			
	if (boost.y > 0 and action.y > 0) or (boost.y < 0 and action.y < 0):
		action.y += boost.y
		

func _ready():
	
	# crash the program if the action has not been set
	if not action:
		print(\"ERROR: Bullet's 'direction' variable was not set correctly\")
		get_tree().quit()
		
	# begin the bullet's animation
	$AnimatedSprite.play(beamType)
		
	# play sound
	$AudioStreamPlayer.stream = sound
	$AudioStreamPlayer.play()
	
	trailTime = 0.05

func _physics_process(delta):
	if direction != \"stop\":
		# move the bullet based on the action set earlier
		translate(action)
		
		if beamType == \"missile\" or beamType == \"super missile\":
			if trailTime <= 0:
				
				var t = trail.instance()
				
				t.global_position = self.global_position
				
				get_parent().add_child(t)
				trailTime = 0.05
			else:
				trailTime -= delta

# kill bullet when it leaves the screen
func _on_screen_exited():
	killSelf()
	
func killSelf():
	direction = \"stop\"
	if $AudioStreamPlayer.playing:
		for child in self.get_children():
			if child != $AudioStreamPlayer:
				child.queue_free()
		
		yield($AudioStreamPlayer, \"finished\")
	
	queue_free()


func _on_Standard_shot_body_entered(body):
	
	if beamType == \"super missile\":
		get_parent().get_node(\"Samus/ScreenShake\").shakeScreen(1, 5)
	
	# play explosion animation and kill bullet when it collides with a world tile
	if body.name == \"LevelTileMap\":
		direction = \"stop\"
		
		self.rotation_degrees = 0
		
		$Hitbox.shape.height = 1
		if beamType == \"standard\":
			$AnimatedSprite.play(\"small explosion\")
			
			$Hitbox.shape.radius = 16
		else:
			$AnimatedSprite.play(\"large explosion\")
		
			$Hitbox.shape.radius = 30
		yield($AnimatedSprite, \"animation_finished\")
	else:
		body.handleShot(beamType)
		
	
		
	killSelf()

"

[sub_resource type="AtlasTexture" id=1]
atlas = ExtResource( 2 )
region = Rect2( 0, 0, 16, 16 )

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 2 )
region = Rect2( 16, 0, 16, 16 )

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 2 )
region = Rect2( 32, 0, 16, 16 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 2 )
region = Rect2( 48, 0, 16, 16 )

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 2 )
region = Rect2( 64, 0, 16, 16 )

[sub_resource type="SpriteFrames" id=6]
resource_local_to_scene = true
animations = [ {
"frames": [ ExtResource( 5 ) ],
"loop": false,
"name": "missile",
"speed": 0.0
}, {
"frames": [ ExtResource( 4 ) ],
"loop": false,
"name": "super missile",
"speed": 0.0
}, {
"frames": [ SubResource( 1 ), SubResource( 2 ), SubResource( 3 ), SubResource( 4 ), SubResource( 5 ) ],
"loop": false,
"name": "small explosion",
"speed": 15.0
}, {
"frames": [ ExtResource( 3 ) ],
"loop": false,
"name": "standard",
"speed": 0.0
}, {
"frames": [ ExtResource( 6 ), ExtResource( 7 ), ExtResource( 11 ), ExtResource( 8 ), ExtResource( 9 ), ExtResource( 10 ) ],
"loop": true,
"name": "large explosion",
"speed": 12.0
} ]

[sub_resource type="CapsuleShape2D" id=7]
resource_local_to_scene = true
radius = 9.0
height = 10.0

[node name="Standard shot" type="Area2D"]
z_index = -2
collision_layer = 2
collision_mask = 12
script = SubResource( 8 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
frames = SubResource( 6 )
animation = "missile"

[node name="VisibilityNotifier2D" type="VisibilityNotifier2D" parent="."]
scale = Vector2( 0.406569, 0.406569 )

[node name="Hitbox" type="CollisionShape2D" parent="."]
position = Vector2( -1.39217, 0 )
rotation = 1.5708
scale = Vector2( 0.407, 0.407 )
shape = SubResource( 7 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
[connection signal="body_entered" from="." to="." method="_on_Standard_shot_body_entered"]
[connection signal="screen_exited" from="VisibilityNotifier2D" to="." method="_on_screen_exited"]
